// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/supergloo/api/external/smi/specs/v1alpha1/http_route.proto

// This package defines user-facing authentication policy.

package v1alpha1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// TrafficTarget associates a set of traffic definitions (rules) with a service identity which is allocated to a group of pods.
// Access is controlled via referenced TrafficSpecs and by a list of source service identities.
// * If a pod which holds the referenced service identity makes a call to the destination on one of the defined routes then access
//   will be allowed
// * Any pod which attempts to connect and is not in the defined list of sources will be denied
// * Any pod which is in the defined list, but attempts to connect on a route which is not in the list of the
//   TrafficSpecs will be denied
type HTTPRouteGroup struct {
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata"`
	// Routes for inbound traffic
	Matches              []*HTTPMatch `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HTTPRouteGroup) Reset()         { *m = HTTPRouteGroup{} }
func (m *HTTPRouteGroup) String() string { return proto.CompactTextString(m) }
func (*HTTPRouteGroup) ProtoMessage()    {}
func (*HTTPRouteGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b2c4749ecd5df1a, []int{0}
}
func (m *HTTPRouteGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPRouteGroup.Unmarshal(m, b)
}
func (m *HTTPRouteGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPRouteGroup.Marshal(b, m, deterministic)
}
func (m *HTTPRouteGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPRouteGroup.Merge(m, src)
}
func (m *HTTPRouteGroup) XXX_Size() int {
	return xxx_messageInfo_HTTPRouteGroup.Size(m)
}
func (m *HTTPRouteGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPRouteGroup.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPRouteGroup proto.InternalMessageInfo

func (m *HTTPRouteGroup) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *HTTPRouteGroup) GetMatches() []*HTTPMatch {
	if m != nil {
		return m.Matches
	}
	return nil
}

// HTTPMatch defines an individual route for HTTP traffic
type HTTPMatch struct {
	// Name is the name of the match for referencing in a TrafficTarget
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Methods for inbound traffic as defined in RFC 7231
	// https://tools.ietf.org/html/rfc7231#section-4
	Methods []string `protobuf:"bytes,2,rep,name=methods,proto3" json:"methods,omitempty"`
	// PathRegex is a regular expression defining the route
	PathRegex            string   `protobuf:"bytes,3,opt,name=path_regex,json=pathRegex,proto3" json:"path_regex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPMatch) Reset()         { *m = HTTPMatch{} }
func (m *HTTPMatch) String() string { return proto.CompactTextString(m) }
func (*HTTPMatch) ProtoMessage()    {}
func (*HTTPMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b2c4749ecd5df1a, []int{1}
}
func (m *HTTPMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPMatch.Unmarshal(m, b)
}
func (m *HTTPMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPMatch.Marshal(b, m, deterministic)
}
func (m *HTTPMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPMatch.Merge(m, src)
}
func (m *HTTPMatch) XXX_Size() int {
	return xxx_messageInfo_HTTPMatch.Size(m)
}
func (m *HTTPMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPMatch.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPMatch proto.InternalMessageInfo

func (m *HTTPMatch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HTTPMatch) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *HTTPMatch) GetPathRegex() string {
	if m != nil {
		return m.PathRegex
	}
	return ""
}

func init() {
	proto.RegisterType((*HTTPRouteGroup)(nil), "smi.split.v1alpha1.HTTPRouteGroup")
	proto.RegisterType((*HTTPMatch)(nil), "smi.split.v1alpha1.HTTPMatch")
}

func init() {
	proto.RegisterFile("github.com/solo-io/supergloo/api/external/smi/specs/v1alpha1/http_route.proto", fileDescriptor_4b2c4749ecd5df1a)
}

var fileDescriptor_4b2c4749ecd5df1a = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x7d, 0x79, 0x89, 0xd6, 0x4c, 0x41, 0x71, 0x10, 0x09, 0x42, 0x6b, 0xe8, 0x2a, 0x1b, 0x67,
	0x48, 0x5d, 0x28, 0xae, 0xa4, 0x0b, 0x75, 0x53, 0x90, 0xd0, 0x85, 0xb8, 0x29, 0xd3, 0x74, 0x48,
	0x86, 0x26, 0x9d, 0x61, 0xe6, 0xa6, 0x74, 0xdd, 0x5f, 0x71, 0xe3, 0xa7, 0xf8, 0x15, 0x2e, 0xfc,
	0x83, 0xfe, 0x81, 0x4c, 0xda, 0x74, 0x63, 0x11, 0x57, 0xb9, 0xf7, 0xe6, 0x9c, 0x7b, 0xee, 0x9c,
	0x83, 0x86, 0x99, 0x80, 0xbc, 0x9a, 0x90, 0x54, 0x96, 0xd4, 0xc8, 0x42, 0x5e, 0x09, 0x49, 0x4d,
	0xa5, 0xb8, 0xce, 0x0a, 0x29, 0x29, 0x53, 0x82, 0xf2, 0x25, 0x70, 0x3d, 0x67, 0x05, 0x35, 0xa5,
	0xa0, 0x46, 0xf1, 0xd4, 0xd0, 0x45, 0xcc, 0x0a, 0x95, 0xb3, 0x98, 0xe6, 0x00, 0x6a, 0xac, 0x65,
	0x05, 0x9c, 0x28, 0x2d, 0x41, 0x62, 0x6c, 0x4a, 0x41, 0x8c, 0x2a, 0x04, 0x90, 0x06, 0x74, 0x11,
	0xef, 0x93, 0xb0, 0xdf, 0x99, 0x80, 0x5a, 0x61, 0x11, 0xd3, 0x92, 0x03, 0x9b, 0x32, 0x60, 0x9b,
	0x35, 0x7f, 0xa2, 0x34, 0xfd, 0x96, 0x72, 0x96, 0xc9, 0x4c, 0xd6, 0x25, 0xb5, 0xd5, 0x66, 0xda,
	0x7b, 0x73, 0xd0, 0xf1, 0xd3, 0x68, 0xf4, 0x9c, 0xd8, 0x1b, 0x1f, 0xb5, 0xac, 0x14, 0xbe, 0x45,
	0x47, 0x8d, 0x5a, 0xc0, 0x43, 0x27, 0x6a, 0xf7, 0xcf, 0x49, 0x2a, 0x35, 0x27, 0x76, 0x21, 0x11,
	0x92, 0x0c, 0xb7, 0x7f, 0x07, 0xde, 0xc7, 0xe7, 0xe5, 0xbf, 0x64, 0x87, 0xc6, 0x37, 0xa8, 0x55,
	0x32, 0x48, 0x73, 0x6e, 0x02, 0x27, 0x74, 0xa3, 0x76, 0xbf, 0x43, 0x7e, 0x3e, 0x97, 0x58, 0xb9,
	0xa1, 0x85, 0x25, 0x0d, 0xfa, 0xae, 0xbb, 0x5a, 0x7b, 0x07, 0xc8, 0xcd, 0x41, 0xaf, 0xd6, 0xde,
	0x29, 0x3e, 0xb1, 0xb6, 0xd5, 0xae, 0x65, 0xf6, 0x22, 0xd3, 0x7b, 0x41, 0xfe, 0x8e, 0x85, 0x31,
	0xf2, 0xe6, 0xac, 0xe4, 0x81, 0x13, 0x3a, 0x91, 0x9f, 0xd4, 0x35, 0x0e, 0x50, 0xab, 0xe4, 0x90,
	0xcb, 0xa9, 0x09, 0xfe, 0x87, 0x6e, 0xe4, 0x27, 0x4d, 0x8b, 0x3b, 0x08, 0x29, 0x06, 0xf9, 0x58,
	0xf3, 0x8c, 0x2f, 0x03, 0xb7, 0xe6, 0xf8, 0x76, 0x92, 0xd8, 0xc1, 0xe0, 0xe1, 0xfd, 0xab, 0xeb,
	0xbc, 0xde, 0xff, 0x1a, 0xb2, 0x9a, 0x65, 0xfb, 0x82, 0x2e, 0x04, 0xec, 0x82, 0x9e, 0x1c, 0xd6,
	0x76, 0x5e, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xbe, 0x77, 0xd1, 0x2f, 0x02, 0x00, 0x00,
}

func (this *HTTPRouteGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPRouteGroup)
	if !ok {
		that2, ok := that.(HTTPRouteGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if len(this.Matches) != len(that1.Matches) {
		return false
	}
	for i := range this.Matches {
		if !this.Matches[i].Equal(that1.Matches[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HTTPMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPMatch)
	if !ok {
		that2, ok := that.(HTTPMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Methods) != len(that1.Methods) {
		return false
	}
	for i := range this.Methods {
		if this.Methods[i] != that1.Methods[i] {
			return false
		}
	}
	if this.PathRegex != that1.PathRegex {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
