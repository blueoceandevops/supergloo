// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/supergloo/api/external/smi/split/v1alpha1/traffic_split.proto

// This package defines user-facing authentication policy.

package v1alpha1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// TrafficTarget associates a set of traffic definitions (rules) with a service identity which is allocated to a group of pods.
// Access is controlled via referenced TrafficSpecs and by a list of source service identities.
// * If a pod which holds the referenced service identity makes a call to the destination on one of the defined routes then access
//   will be allowed
// * Any pod which attempts to connect and is not in the defined list of sources will be denied
// * Any pod which is in the defined list, but attempts to connect on a route which is not in the list of the
//   TrafficSpecs will be denied
type TrafficSplit struct {
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata"`
	// Specification of the desired behavior of the traffic split.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
	Spec                 *TrafficSplitSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TrafficSplit) Reset()         { *m = TrafficSplit{} }
func (m *TrafficSplit) String() string { return proto.CompactTextString(m) }
func (*TrafficSplit) ProtoMessage()    {}
func (*TrafficSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f5b5189052769ab, []int{0}
}
func (m *TrafficSplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSplit.Unmarshal(m, b)
}
func (m *TrafficSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSplit.Marshal(b, m, deterministic)
}
func (m *TrafficSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSplit.Merge(m, src)
}
func (m *TrafficSplit) XXX_Size() int {
	return xxx_messageInfo_TrafficSplit.Size(m)
}
func (m *TrafficSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSplit.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSplit proto.InternalMessageInfo

func (m *TrafficSplit) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *TrafficSplit) GetSpec() *TrafficSplitSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// TrafficSplitSpec is the specification for a TrafficSplit
type TrafficSplitSpec struct {
	Service              string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Backends             []*TrafficSplitBackend `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TrafficSplitSpec) Reset()         { *m = TrafficSplitSpec{} }
func (m *TrafficSplitSpec) String() string { return proto.CompactTextString(m) }
func (*TrafficSplitSpec) ProtoMessage()    {}
func (*TrafficSplitSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f5b5189052769ab, []int{1}
}
func (m *TrafficSplitSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSplitSpec.Unmarshal(m, b)
}
func (m *TrafficSplitSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSplitSpec.Marshal(b, m, deterministic)
}
func (m *TrafficSplitSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSplitSpec.Merge(m, src)
}
func (m *TrafficSplitSpec) XXX_Size() int {
	return xxx_messageInfo_TrafficSplitSpec.Size(m)
}
func (m *TrafficSplitSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSplitSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSplitSpec proto.InternalMessageInfo

func (m *TrafficSplitSpec) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *TrafficSplitSpec) GetBackends() []*TrafficSplitBackend {
	if m != nil {
		return m.Backends
	}
	return nil
}

// TrafficSplitBackend defines a backend
type TrafficSplitBackend struct {
	Service              string    `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Weight               *Quantity `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TrafficSplitBackend) Reset()         { *m = TrafficSplitBackend{} }
func (m *TrafficSplitBackend) String() string { return proto.CompactTextString(m) }
func (*TrafficSplitBackend) ProtoMessage()    {}
func (*TrafficSplitBackend) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f5b5189052769ab, []int{2}
}
func (m *TrafficSplitBackend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSplitBackend.Unmarshal(m, b)
}
func (m *TrafficSplitBackend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSplitBackend.Marshal(b, m, deterministic)
}
func (m *TrafficSplitBackend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSplitBackend.Merge(m, src)
}
func (m *TrafficSplitBackend) XXX_Size() int {
	return xxx_messageInfo_TrafficSplitBackend.Size(m)
}
func (m *TrafficSplitBackend) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSplitBackend.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSplitBackend proto.InternalMessageInfo

func (m *TrafficSplitBackend) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *TrafficSplitBackend) GetWeight() *Quantity {
	if m != nil {
		return m.Weight
	}
	return nil
}

// Quantity is a fixed-point representation of a number.
// It provides convenient marshaling/unmarshaling in JSON and YAML,
// in addition to String() and Int64() accessors.
//
// The serialization format is:
//
// <quantity>        ::= <signedNumber><suffix>
//   (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
// <digit>           ::= 0 | 1 | ... | 9
// <digits>          ::= <digit> | <digit><digits>
// <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits>
// <sign>            ::= "+" | "-"
// <signedNumber>    ::= <number> | <sign><number>
// <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI>
// <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
//   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
// <decimalSI>       ::= m | "" | k | M | G | T | P | E
//   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
// <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
//
// No matter which of the three exponent forms is used, no quantity may represent
// a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
// places. Numbers larger or more precise will be capped or rounded up.
// (E.g.: 0.1m will rounded up to 1m.)
// This may be extended in the future if we require larger or smaller quantities.
//
// When a Quantity is parsed from a string, it will remember the type of suffix
// it had, and will use the same type again when it is serialized.
//
// Before serializing, Quantity will be put in "canonical form".
// This means that Exponent/suffix will be adjusted up or down (with a
// corresponding increase or decrease in Mantissa) such that:
//   a. No precision is lost
//   b. No fractional digits will be emitted
//   c. The exponent (or suffix) is as large as possible.
// The sign will be omitted unless the number is negative.
//
// Examples:
//   1.5 will be serialized as "1500m"
//   1.5Gi will be serialized as "1536Mi"
//
// Note that the quantity will NEVER be internally represented by a
// floating point number. That is the whole point of this exercise.
//
// Non-canonical values will still parse as long as they are well formed,
// but will be re-emitted in their canonical form. (So always use canonical
// form, or don't diff.)
//
// This format is intended to make it difficult to use these numbers without
// writing some sort of special handling code in the hopes that that will
// cause implementors to also use a fixed point implementation.
type Quantity struct {
	String_              string   `protobuf:"bytes,1,opt,name=string,proto3" json:"string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Quantity) Reset()         { *m = Quantity{} }
func (m *Quantity) String() string { return proto.CompactTextString(m) }
func (*Quantity) ProtoMessage()    {}
func (*Quantity) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f5b5189052769ab, []int{3}
}
func (m *Quantity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Quantity.Unmarshal(m, b)
}
func (m *Quantity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Quantity.Marshal(b, m, deterministic)
}
func (m *Quantity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quantity.Merge(m, src)
}
func (m *Quantity) XXX_Size() int {
	return xxx_messageInfo_Quantity.Size(m)
}
func (m *Quantity) XXX_DiscardUnknown() {
	xxx_messageInfo_Quantity.DiscardUnknown(m)
}

var xxx_messageInfo_Quantity proto.InternalMessageInfo

func (m *Quantity) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func init() {
	proto.RegisterType((*TrafficSplit)(nil), "smi.split.v1alpha1.TrafficSplit")
	proto.RegisterType((*TrafficSplitSpec)(nil), "smi.split.v1alpha1.TrafficSplitSpec")
	proto.RegisterType((*TrafficSplitBackend)(nil), "smi.split.v1alpha1.TrafficSplitBackend")
	proto.RegisterType((*Quantity)(nil), "smi.split.v1alpha1.Quantity")
}

func init() {
	proto.RegisterFile("github.com/solo-io/supergloo/api/external/smi/split/v1alpha1/traffic_split.proto", fileDescriptor_8f5b5189052769ab)
}

var fileDescriptor_8f5b5189052769ab = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x25, 0x25, 0x2a, 0xc5, 0x05, 0x81, 0x0c, 0xaa, 0x22, 0x40, 0x50, 0x45, 0x48, 0x74, 0xc1,
	0x56, 0x0a, 0x43, 0xc5, 0x84, 0x8a, 0xc4, 0x86, 0x04, 0x29, 0x13, 0x0b, 0x72, 0x53, 0x37, 0xb5,
	0x9a, 0xc4, 0xc6, 0x76, 0x0b, 0xac, 0xfd, 0x11, 0x56, 0x3e, 0x85, 0xaf, 0x60, 0xe0, 0x0f, 0xfa,
	0x07, 0x28, 0x4e, 0x52, 0x21, 0xa8, 0x5a, 0x26, 0xdf, 0x3d, 0xbf, 0x77, 0xef, 0xce, 0x3e, 0x70,
	0x1b, 0x32, 0x3d, 0x18, 0x75, 0x51, 0xc0, 0x63, 0xac, 0x78, 0xc4, 0x4f, 0x19, 0xc7, 0x6a, 0x24,
	0xa8, 0x0c, 0x23, 0xce, 0x31, 0x11, 0x0c, 0xd3, 0x17, 0x4d, 0x65, 0x42, 0x22, 0xac, 0x62, 0x86,
	0x95, 0x88, 0x98, 0xc6, 0x63, 0x8f, 0x44, 0x62, 0x40, 0x3c, 0xac, 0x25, 0xe9, 0xf7, 0x59, 0xf0,
	0x68, 0x60, 0x24, 0x24, 0xd7, 0x1c, 0x42, 0x15, 0x33, 0x94, 0x01, 0x05, 0x6f, 0xcf, 0x9b, 0xe7,
	0x92, 0x9e, 0x43, 0xa6, 0x8d, 0xc9, 0xd8, 0xc3, 0x31, 0xd5, 0xa4, 0x47, 0x34, 0xc9, 0xca, 0xfc,
	0x4b, 0x52, 0xe4, 0xb9, 0x64, 0x37, 0xe4, 0x21, 0x37, 0x21, 0x4e, 0xa3, 0x0c, 0x75, 0xdf, 0x2c,
	0xb0, 0x71, 0x9f, 0xf5, 0xd9, 0x49, 0xbb, 0x82, 0x2d, 0x50, 0x29, 0xbc, 0x1c, 0x5a, 0xb7, 0x1a,
	0xd5, 0x66, 0x0d, 0x05, 0x5c, 0x52, 0x94, 0x96, 0x43, 0x8c, 0xa3, 0x9b, 0xfc, 0xb6, 0x6d, 0x7f,
	0x7c, 0x1e, 0xad, 0xf8, 0x33, 0x36, 0x6c, 0x01, 0x5b, 0x09, 0x1a, 0x38, 0x96, 0x51, 0x1d, 0xa3,
	0xbf, 0x93, 0xa2, 0x9f, 0x4e, 0x1d, 0x41, 0x03, 0xdf, 0x28, 0x2e, 0xf6, 0x27, 0x53, 0xdb, 0x06,
	0x25, 0xad, 0x26, 0x53, 0x7b, 0x0b, 0x6e, 0xe6, 0xef, 0x66, 0xb4, 0xca, 0x7d, 0x02, 0xdb, 0xbf,
	0x65, 0xd0, 0x01, 0x6b, 0x8a, 0xca, 0x31, 0x0b, 0xa8, 0x71, 0x5b, 0xf7, 0x8b, 0x14, 0x5e, 0x81,
	0x4a, 0x97, 0x04, 0x43, 0x9a, 0xf4, 0x94, 0x53, 0xaa, 0xaf, 0x36, 0xaa, 0xcd, 0x93, 0x65, 0x8d,
	0xb4, 0x33, 0xbe, 0x3f, 0x13, 0xba, 0x14, 0xec, 0xcc, 0x21, 0x2c, 0x70, 0x3d, 0x07, 0xe5, 0x67,
	0xca, 0xc2, 0x81, 0x76, 0x4a, 0x66, 0xf8, 0x83, 0x79, 0x9e, 0x77, 0x23, 0x92, 0x68, 0xa6, 0x5f,
	0xfd, 0x9c, 0xeb, 0xba, 0xa0, 0x52, 0x60, 0xb0, 0x06, 0xca, 0x4a, 0x4b, 0x96, 0x84, 0x79, 0xe9,
	0x3c, 0x6b, 0x5f, 0xbf, 0x7f, 0x1d, 0x5a, 0x0f, 0x97, 0x0b, 0xf7, 0x50, 0x0c, 0xc3, 0x65, 0xbb,
	0xd8, 0x2d, 0x9b, 0xef, 0x3e, 0xfb, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x96, 0x56, 0xbf, 0x12, 0xd2,
	0x02, 0x00, 0x00,
}

func (this *TrafficSplit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficSplit)
	if !ok {
		that2, ok := that.(TrafficSplit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficSplitSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficSplitSpec)
	if !ok {
		that2, ok := that.(TrafficSplitSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if len(this.Backends) != len(that1.Backends) {
		return false
	}
	for i := range this.Backends {
		if !this.Backends[i].Equal(that1.Backends[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficSplitBackend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficSplitBackend)
	if !ok {
		that2, ok := that.(TrafficSplitBackend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if !this.Weight.Equal(that1.Weight) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Quantity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Quantity)
	if !ok {
		that2, ok := that.(Quantity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.String_ != that1.String_ {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
