// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/supergloo/api/external/smi/split/v1alpha1/traffic_split.proto

// This package defines user-facing authentication policy.

package v1alpha1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// TrafficTarget associates a set of traffic definitions (rules) with a service identity which is allocated to a group of pods.
// Access is controlled via referenced TrafficSpecs and by a list of source service identities.
// * If a pod which holds the referenced service identity makes a call to the destination on one of the defined routes then access
//   will be allowed
// * Any pod which attempts to connect and is not in the defined list of sources will be denied
// * Any pod which is in the defined list, but attempts to connect on a route which is not in the list of the
//   TrafficSpecs will be denied
type TrafficSplit struct {
	// Metadata contains the object metadata for this resource
	Metadata core.Metadata `protobuf:"bytes,101,opt,name=metadata,proto3" json:"metadata"`
	// Specification of the desired behavior of the traffic split.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
	Spec                 *TrafficSplitSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TrafficSplit) Reset()         { *m = TrafficSplit{} }
func (m *TrafficSplit) String() string { return proto.CompactTextString(m) }
func (*TrafficSplit) ProtoMessage()    {}
func (*TrafficSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f5b5189052769ab, []int{0}
}
func (m *TrafficSplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSplit.Unmarshal(m, b)
}
func (m *TrafficSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSplit.Marshal(b, m, deterministic)
}
func (m *TrafficSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSplit.Merge(m, src)
}
func (m *TrafficSplit) XXX_Size() int {
	return xxx_messageInfo_TrafficSplit.Size(m)
}
func (m *TrafficSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSplit.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSplit proto.InternalMessageInfo

func (m *TrafficSplit) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *TrafficSplit) GetSpec() *TrafficSplitSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// TrafficSplitSpec is the specification for a TrafficSplit
type TrafficSplitSpec struct {
	Service              string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Backends             []*TrafficSplitBackend `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TrafficSplitSpec) Reset()         { *m = TrafficSplitSpec{} }
func (m *TrafficSplitSpec) String() string { return proto.CompactTextString(m) }
func (*TrafficSplitSpec) ProtoMessage()    {}
func (*TrafficSplitSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f5b5189052769ab, []int{1}
}
func (m *TrafficSplitSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSplitSpec.Unmarshal(m, b)
}
func (m *TrafficSplitSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSplitSpec.Marshal(b, m, deterministic)
}
func (m *TrafficSplitSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSplitSpec.Merge(m, src)
}
func (m *TrafficSplitSpec) XXX_Size() int {
	return xxx_messageInfo_TrafficSplitSpec.Size(m)
}
func (m *TrafficSplitSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSplitSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSplitSpec proto.InternalMessageInfo

func (m *TrafficSplitSpec) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *TrafficSplitSpec) GetBackends() []*TrafficSplitBackend {
	if m != nil {
		return m.Backends
	}
	return nil
}

// TrafficSplitBackend defines a backend
type TrafficSplitBackend struct {
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// represents a kubernetes resource.Quantity
	// e.g. in the format 1000m == 1
	Weight               string   `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrafficSplitBackend) Reset()         { *m = TrafficSplitBackend{} }
func (m *TrafficSplitBackend) String() string { return proto.CompactTextString(m) }
func (*TrafficSplitBackend) ProtoMessage()    {}
func (*TrafficSplitBackend) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f5b5189052769ab, []int{2}
}
func (m *TrafficSplitBackend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrafficSplitBackend.Unmarshal(m, b)
}
func (m *TrafficSplitBackend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrafficSplitBackend.Marshal(b, m, deterministic)
}
func (m *TrafficSplitBackend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficSplitBackend.Merge(m, src)
}
func (m *TrafficSplitBackend) XXX_Size() int {
	return xxx_messageInfo_TrafficSplitBackend.Size(m)
}
func (m *TrafficSplitBackend) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficSplitBackend.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficSplitBackend proto.InternalMessageInfo

func (m *TrafficSplitBackend) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *TrafficSplitBackend) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func init() {
	proto.RegisterType((*TrafficSplit)(nil), "smi.split.v1alpha1.TrafficSplit")
	proto.RegisterType((*TrafficSplitSpec)(nil), "smi.split.v1alpha1.TrafficSplitSpec")
	proto.RegisterType((*TrafficSplitBackend)(nil), "smi.split.v1alpha1.TrafficSplitBackend")
}

func init() {
	proto.RegisterFile("github.com/solo-io/supergloo/api/external/smi/split/v1alpha1/traffic_split.proto", fileDescriptor_8f5b5189052769ab)
}

var fileDescriptor_8f5b5189052769ab = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x4e, 0xea, 0x40,
	0x14, 0xc6, 0x6f, 0xb9, 0x0d, 0xe2, 0xa0, 0xd1, 0x8c, 0x86, 0x34, 0x9a, 0x28, 0x21, 0x26, 0xb2,
	0x71, 0x26, 0xc5, 0x0d, 0x71, 0x65, 0x30, 0xd1, 0x95, 0x89, 0x29, 0xae, 0xdc, 0x98, 0x61, 0x18,
	0xca, 0x84, 0x96, 0x33, 0x76, 0x06, 0x74, 0xcd, 0x8b, 0xb8, 0xf5, 0x51, 0x7c, 0x0a, 0x17, 0xbe,
	0x01, 0x6f, 0x60, 0x3a, 0x6d, 0x89, 0x51, 0x02, 0xae, 0x7a, 0xfe, 0x7c, 0xbf, 0xf3, 0x9d, 0xb6,
	0x07, 0xdd, 0x85, 0xd2, 0x0c, 0x27, 0x3d, 0xc2, 0x21, 0xa6, 0x1a, 0x22, 0x38, 0x93, 0x40, 0xf5,
	0x44, 0x89, 0x24, 0x8c, 0x00, 0x28, 0x53, 0x92, 0x8a, 0x17, 0x23, 0x92, 0x31, 0x8b, 0xa8, 0x8e,
	0x25, 0xd5, 0x2a, 0x92, 0x86, 0x4e, 0x7d, 0x16, 0xa9, 0x21, 0xf3, 0xa9, 0x49, 0xd8, 0x60, 0x20,
	0xf9, 0xa3, 0x2d, 0x13, 0x95, 0x80, 0x01, 0x8c, 0x75, 0x2c, 0x49, 0x56, 0x28, 0x74, 0x07, 0xfe,
	0x32, 0x97, 0xf4, 0x39, 0x92, 0xc6, 0x9a, 0x4c, 0x7d, 0x1a, 0x0b, 0xc3, 0xfa, 0xcc, 0xb0, 0x6c,
	0xcc, 0x9f, 0x90, 0x22, 0xcf, 0x91, 0xfd, 0x10, 0x42, 0xb0, 0x21, 0x4d, 0xa3, 0xac, 0xda, 0x78,
	0x75, 0xd0, 0xd6, 0x7d, 0xb6, 0x67, 0x37, 0xdd, 0x0a, 0xb7, 0x51, 0xa5, 0xf0, 0xf2, 0x44, 0xdd,
	0x69, 0x56, 0x5b, 0x35, 0xc2, 0x21, 0x11, 0x24, 0x1d, 0x47, 0x24, 0x90, 0xdb, 0xbc, 0xdb, 0x71,
	0xdf, 0x3f, 0x8e, 0xff, 0x05, 0x0b, 0x35, 0x6e, 0x23, 0x57, 0x2b, 0xc1, 0x3d, 0xc7, 0x52, 0x27,
	0xe4, 0xf7, 0x9b, 0x92, 0xef, 0x4e, 0x5d, 0x25, 0x78, 0x60, 0x89, 0x8b, 0xc3, 0xd9, 0xdc, 0x75,
	0x51, 0xc9, 0xe8, 0xd9, 0xdc, 0xdd, 0xc1, 0xdb, 0xf9, 0x77, 0xb3, 0xac, 0x6e, 0x3c, 0xa1, 0xdd,
	0x9f, 0x18, 0xf6, 0xd0, 0x86, 0x16, 0xc9, 0x54, 0x72, 0x61, 0xdd, 0x36, 0x83, 0x22, 0xc5, 0x57,
	0xa8, 0xd2, 0x63, 0x7c, 0x24, 0xc6, 0x7d, 0xed, 0x95, 0xea, 0xff, 0x9b, 0xd5, 0xd6, 0xe9, 0xba,
	0x45, 0x3a, 0x99, 0x3e, 0x58, 0x80, 0x8d, 0x1b, 0xb4, 0xb7, 0x44, 0xb0, 0xc2, 0xb5, 0x86, 0xca,
	0xcf, 0x42, 0x86, 0x43, 0xe3, 0x95, 0x6c, 0x23, 0xcf, 0x3a, 0xd7, 0x6f, 0x9f, 0x47, 0xce, 0xc3,
	0xe5, 0xca, 0x2b, 0x52, 0xa3, 0x70, 0xdd, 0x25, 0xf5, 0xca, 0xf6, 0x67, 0x9d, 0x7f, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x92, 0x6c, 0x5c, 0xc3, 0x90, 0x02, 0x00, 0x00,
}

func (this *TrafficSplit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficSplit)
	if !ok {
		that2, ok := that.(TrafficSplit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficSplitSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficSplitSpec)
	if !ok {
		that2, ok := that.(TrafficSplitSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if len(this.Backends) != len(that1.Backends) {
		return false
	}
	for i := range this.Backends {
		if !this.Backends[i].Equal(that1.Backends[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TrafficSplitBackend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrafficSplitBackend)
	if !ok {
		that2, ok := that.(TrafficSplitBackend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
