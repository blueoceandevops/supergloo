// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

// $title: Authentication Policy
// $description: Authentication policy for Istio services.
// $location: https://istio.io/docs/reference/config/istio.authentication.v1alpha1.html

// This package defines user-facing authentication policy.
package smi.split.v1alpha1;

option go_package = "github.com/solo-io/supergloo/pkg/api/external/smi/split/v1alpha1";

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";
import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

// TrafficTarget associates a set of traffic definitions (rules) with a service identity which is allocated to a group of pods.
// Access is controlled via referenced TrafficSpecs and by a list of source service identities.
// * If a pod which holds the referenced service identity makes a call to the destination on one of the defined routes then access
//   will be allowed
// * Any pod which attempts to connect and is not in the defined list of sources will be denied
// * Any pod which is in the defined list, but attempts to connect on a route which is not in the list of the
//   TrafficSpecs will be denied
message HTTPRouteGroup {
    option (core.solo.io.resource).short_name = "htr";
    option (core.solo.io.resource).plural_name = "httproutegroups";

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 101 [(gogoproto.nullable) = false];

    // Routes for inbound traffic
    repeated HTTPMatch matches = 1;
}

// HTTPMatch defines an individual route for HTTP traffic
message HTTPMatch {
    // Name is the name of the match for referencing in a TrafficTarget
    string name = 1;

    // Methods for inbound traffic as defined in RFC 7231
    // https://tools.ietf.org/html/rfc7231#section-4
    repeated string methods = 2;

    // PathRegex is a regular expression defining the route
    string path_regex = 3;
}
